const fs = require('fs');
const os = require('os');
const resolve = require('path').resolve;
const child_process = require('child_process');
const SerialPort = require('serialport');

describe('SerialPort', function () {
	let client;
	let hwWrite, hwRead;
	let socat;
	const MASTER_PORT = resolve('./ttyV0');
	const SLAVE_PORT = resolve('./ttyV1');

	const SOCAT_EXISTS = child_process.spawnSync('socat', ['-h']).status === 0;

	if (!SOCAT_EXISTS) {
		console.warn("`socat` is not installed, skipping serial client tests...");
		const installCmd = os.type() === 'Darwin' ? 'brew install socat' : 'sudo apt-get install socat';
		console.warn(`Please run \`${installCmd}\` to enable these tests!`);
		return;
	}

	beforeEach(done => {
		socat = child_process.spawn('socat', ['-d', '-d',
			`pty,raw,nonblock,echo=0,link=${MASTER_PORT}`,
			`pty,raw,nonblock,echo=0,link=${SLAVE_PORT}`],
		{ detached: true, stdio: 'ignore' });
		socat.on('close', code => {
			console.log('socat exited with code', code);
		}).on('error', done);

		// socat needs time to init the fds.  Wait for the expected ports to appear...
		const waitForPorts = () => {
			try {
				if (fs.statSync(MASTER_PORT).dev && fs.statSync(SLAVE_PORT).dev) {
					hwWrite = fs.createWriteStream(MASTER_PORT, { autoClose: false });
					hwRead = fs.createReadStream(MASTER_PORT);
					hwRead.on('error', () => { }); // ignore read errors on linux when client side stream is closed.
					client = new SerialPort(SLAVE_PORT, { autoOpen: false });
					done();
				}
			}
			catch (ex) { // ENOENT if both fds have not been created yet.
				setTimeout(waitForPorts, 100);
			}
		};
		waitForPorts();
	});

	afterEach(done => {
		const cb = err => {
			if (hwWrite) hwWrite.close();
			socat.kill('SIGTERM');
			done(err);
		};

		if (client && client.isOpen()) client.close(cb);
		else cb();
	});

	it('can read and write to ports', async function () {
		try {
client.
		} catch (error) {
			return Promise.reject(error);
		}
	});
	// tests go here.  `client` is an initialized serial client and `hwRead` and `hwWrite` are 
	// streams you can use for the 'other' side of the serial client.
});